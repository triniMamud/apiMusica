/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.23).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Band;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-11-27T14:24:09.910Z[GMT]")
public interface BandApi {

    @Operation(summary = "Add a new band to the repository", description = "", tags={ "Band" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/Band",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addBand(@Parameter(in = ParameterIn.DEFAULT, description = "Band object that needs to be added to the repository", required=true, schema=@Schema()) @Valid @RequestBody Band body, @Parameter(in = ParameterIn.PATH, description = "Name", required=true, schema=@Schema()) @PathVariable("bandName") String bandName,
                                 @Parameter(in = ParameterIn.PATH, description = "Description", required=true, schema=@Schema()) @PathVariable("description") String description);


    @Operation(summary = "Deletes a band", description = "", tags={ "Band" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid name supplied"),
        
        @ApiResponse(responseCode = "404", description = "Band not found") })
    @RequestMapping(value = "/Band/{bandName}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBand(@Parameter(in = ParameterIn.PATH, description = "Band name to delete", required=true, schema=@Schema()) @PathVariable("bandName") String bandName);


    @Operation(summary = "Finds Band by name", description = "A name value can be provided", tags={ "Band" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid status value") })
    @RequestMapping(value = "/Band/{bandName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Band> findBandByName(@Parameter(in = ParameterIn.PATH, description = "Name value that need to be considered for filter", required=true, schema=@Schema()) @PathVariable("bandName") String bandName);


    @Operation(summary = "Gets all bands in the repository", description = "", tags={ "Band" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid status value") })
    @RequestMapping(value = "/Band",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Band>> getAllBands();


    @Operation(summary = "Update artists of an existing band", description = "", tags={ "Band" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Band not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/Band/putArtist/{bandName}/{artistName}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateArtistsBand(@Parameter(in = ParameterIn.PATH, description = "List of artists name to add", required=true, schema=@Schema()) @PathVariable("artistName") List<String> artistName, @Parameter(in = ParameterIn.DEFAULT, description = "Band object that needs to be updated to the repository", required=true, schema=@Schema()) @Valid @RequestBody Band body);


    @Operation(summary = "Update songs of an existing band", description = "", tags={ "Band" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Band not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/Band/putSong/{bandName}/{songName}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateSongsBand(@Parameter(in = ParameterIn.PATH, description = "List of songs name to add", required=true, schema=@Schema()) @PathVariable("songName") List<String> songName, @Parameter(in = ParameterIn.DEFAULT, description = "Band object that needs to be updated to the repository", required=true, schema=@Schema()) @Valid @RequestBody Band body);

}

