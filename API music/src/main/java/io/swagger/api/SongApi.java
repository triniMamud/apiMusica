/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.23).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Song;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-11-25T13:09:59.949Z[GMT]")
public interface SongApi {

    @Operation(summary = "Create song", description = "Cretes an unexisting song.", tags={ "Song" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation") })
    @RequestMapping(value = "/Song",
        consumes = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createSong(@Parameter(in = ParameterIn.DEFAULT, description = "Created song object", required=true, schema=@Schema()) @Valid @RequestBody Song body);


    @Operation(summary = "Delete song", description = "Delete song object", tags={ "Song" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid song name supplied"),
        
        @ApiResponse(responseCode = "404", description = "Song not found") })
    @RequestMapping(value = "/Song/{songName}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSong(@Parameter(in = ParameterIn.PATH, description = "The name that needs to be deleted", required=true, schema=@Schema()) @PathVariable("songName") String songName);


    @Operation(summary = "Get Song by song name", description = "", tags={ "Song" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Song.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid song name supplied"),
        
        @ApiResponse(responseCode = "404", description = "Song not found") })
    @RequestMapping(value = "/Song/{songName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Song> getSongByName(@Parameter(in = ParameterIn.PATH, description = "The name that needs to be fetched.", required=true, schema=@Schema()) @PathVariable("songName") String songName);

}

